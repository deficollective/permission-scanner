{
    "BaseMath": {
        "Contract_Name": "BaseMath",
        "Functions": []
    },
    "CheckContract": {
        "Contract_Name": "CheckContract",
        "Functions": []
    },
    "IERC20": {
        "Contract_Name": "IERC20",
        "Functions": []
    },
    "IERC2612": {
        "Contract_Name": "IERC2612",
        "Functions": []
    },
    "LiquityMath": {
        "Contract_Name": "LiquityMath",
        "Functions": []
    },
    "Ownable": {
        "Contract_Name": "Ownable",
        "Functions": []
    },
    "SafeMath": {
        "Contract_Name": "SafeMath",
        "Functions": []
    },
    "console": {
        "Contract_Name": "console",
        "Functions": []
    },
    "ILQTYStaking": {
        "Contract_Name": "ILQTYStaking",
        "Functions": []
    },
    "ILQTYToken": {
        "Contract_Name": "ILQTYToken",
        "Functions": []
    },
    "ILUSDToken": {
        "Contract_Name": "ILUSDToken",
        "Functions": []
    },
    "LQTYStaking": {
        "Contract_Name": "LQTYStaking",
        "Functions": [
            {
                "Function": "setAddresses",
                "Modifiers": [
                    "onlyOwner"
                ],
                "msg.sender_conditions": [],
                "state_variables_read": [
                    "msg.sender",
                    "_owner"
                ],
                "state_variables_written": [
                    "lqtyToken",
                    "_owner",
                    "troveManagerAddress",
                    "borrowerOperationsAddress",
                    "activePoolAddress",
                    "lusdToken"
                ]
            },
            {
                "Function": "increaseF_ETH",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == troveManagerAddress,LQTYStaking: caller is not TroveM)"
                ],
                "state_variables_read": [],
                "state_variables_written": [
                    "F_ETH"
                ]
            },
            {
                "Function": "increaseF_LUSD",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == borrowerOperationsAddress,LQTYStaking: caller is not BorrowerOps)"
                ],
                "state_variables_read": [],
                "state_variables_written": [
                    "F_LUSD"
                ]
            },
            {
                "Function": "_requireCallerIsTroveManager",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == troveManagerAddress,LQTYStaking: caller is not TroveM)"
                ],
                "state_variables_read": [],
                "state_variables_written": []
            },
            {
                "Function": "_requireCallerIsBorrowerOperations",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == borrowerOperationsAddress,LQTYStaking: caller is not BorrowerOps)"
                ],
                "state_variables_read": [],
                "state_variables_written": []
            },
            {
                "Function": "_requireCallerIsActivePool",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == activePoolAddress,LQTYStaking: caller is not ActivePool)"
                ],
                "state_variables_read": [],
                "state_variables_written": []
            },
            {
                "Function": "receive",
                "Modifiers": [],
                "msg.sender_conditions": [
                    "require(bool,string)(msg.sender == activePoolAddress,LQTYStaking: caller is not ActivePool)"
                ],
                "state_variables_read": [],
                "state_variables_written": []
            }
        ],
        "_owner": "0x0000000000000000000000000000000000000000"
    }
}